(function(t,c){typeof exports=="object"&&typeof module<"u"?c(exports,require("react/jsx-runtime"),require("react")):typeof define=="function"&&define.amd?define(["exports","react/jsx-runtime","react"],c):(t=typeof globalThis<"u"?globalThis:t||self,c(t.DialogflowReact={},t.jsxRuntime,t.react))})(this,function(t,c,u){"use strict";function w(a){let e=a;const o=new Set;return{getSnapshot:()=>e,setState:r=>{e={...e,...r};for(const d of o)d(e)},subscribe:r=>(o.add(r),()=>o.delete(r))}}function y(){let a=0;const e=new Map,o=w({dialogs:[]}),r=(n,s)=>{e.has(s)&&console.warn(`Dialog with ID "${s}" is already registered. Overwriting.`),e.set(s,n)},d=(n,s={})=>{let l,i;if(typeof n=="string"){if(i=n,l=e.get(i),!l)return Promise.reject(new Error(`No dialog registered with ID "${i}".`))}else if(typeof n=="function")l=n,i=`dialog_${a++}`;else return Promise.reject(new Error("Invalid dialog identifier."));return new Promise(g=>{const f={id:i,Component:l,resolver:g,props:{...s,close:j=>{S(i,j)}}},{dialogs:x}=o.getSnapshot();o.setState({dialogs:[...x,f]})})},S=(n,s)=>{const{dialogs:l}=o.getSnapshot(),i=l.findIndex(g=>g.id===n);if(i!==-1){l[i].resolver(s);const f=[...l];f.splice(i,1),o.setState({dialogs:f})}};return{open:d,register:r,...o}}const p=u.createContext({open:async()=>null}),D=()=>u.useContext(p);function h({children:a,manager:e}){const{dialogs:o}=u.useSyncExternalStore(e.subscribe,e.getSnapshot,e.getSnapshot),r=u.useMemo(()=>({open:e.open}),[e.open]);return c.jsxs(p.Provider,{value:r,children:[a,o.map(d=>{const{Component:S,props:n,id:s}=d;return c.jsx(S,{...n},s)})]})}t.DialogContext=p,t.DialogProvider=h,t.createDialogflow=y,t.createStore=w,t.useDialog=D,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});
