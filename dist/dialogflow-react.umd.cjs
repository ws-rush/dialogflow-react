(function(n,a){typeof exports=="object"&&typeof module<"u"?a(exports,require("react/jsx-runtime"),require("react")):typeof define=="function"&&define.amd?define(["exports","react/jsx-runtime","react"],a):(n=typeof globalThis<"u"?globalThis:n||self,a(n.DialogflowReact={},n.jsxRuntime,n.react))})(this,function(n,a,g){"use strict";function w(u){let e=u;const t=new Set;return{getSnapshot:()=>e,setState:r=>{e={...e,...r};for(const d of t)d(e)},subscribe:r=>(t.add(r),()=>t.delete(r))}}function D(){let u=0;const e=new Map,t=w({dialogs:[]}),r=(o,s)=>{e.has(s)&&console.warn(`Dialog with ID "${s}" is already registered. Overwriting.`),e.set(s,o)},d=(o,s={})=>{const i=`dialog_${u++}`;return new Promise(c=>{const p={id:i,Component:o,resolver:c,props:{...s,close:y=>{f(i,y)}}},{dialogs:l}=t.getSnapshot();t.setState({dialogs:[...l,p]})})},S=(o,s={})=>{const i=e.get(o);if(!i)return Promise.reject(new Error(`No dialog registered with ID "${o}".`));const{dialogs:c}=t.getSnapshot();return c.some(l=>l.id===o)?Promise.resolve():new Promise(l=>{const y={id:o,Component:i,resolver:l,props:{...s,close:v=>{f(o,v)}}};t.setState({dialogs:[...c,y]})})},f=(o,s)=>{const{dialogs:i}=t.getSnapshot(),c=i.findIndex(p=>p.id===o);if(c!==-1){i[c].resolver(s);const l=[...i];l.splice(c,1),t.setState({dialogs:l})}};return{push:d,open:S,register:r,...t}}const h=g.createContext({push:async()=>null,open:async()=>null}),x=()=>g.useContext(h);function m({children:u,manager:e}){const{dialogs:t}=g.useSyncExternalStore(e.subscribe,e.getSnapshot,e.getSnapshot),r=g.useMemo(()=>({open:e.open,push:e.push}),[e.open,e.push]);return a.jsxs(h.Provider,{value:r,children:[u,t.map(d=>{const{Component:S,props:f,id:o}=d;return a.jsx(S,{...f},o)})]})}n.DialogContext=h,n.DialogProvider=m,n.createDialogflow=D,n.createStore=w,n.useDialog=x,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});
